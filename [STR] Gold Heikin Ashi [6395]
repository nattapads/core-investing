//NSal
//@version=6
strategy('[STR] Gold Heikin Ashi [6395]', overlay = true, margin_long = 100, margin_short = 100, pyramiding = 3, risk_free_rate = 0)

//------------------------------------------------------------------------------
//Strategy Settings
//-----------------------------------------------------------------------------{
startTime = input.time(timestamp('Jan 01 2000 00:00:00'), title = 'Start Time')
inTimeWindow = time >= startTime

//-----------------------------------------------------------------------------}
//Alligato Settings
//-----------------------------------------------------------------------------{
jawPeriod = input.int(13, minval = 1, title = 'Jaw Period', group = 'Alligato Settings')
teethPeriod = input.int(8, minval = 1, title = 'Teeth Period', group = 'Alligato Settings')
lipsPeriod = input.int(5, minval = 1, title = 'Lips Period', group = 'Alligato Settings')
jawOffset = input.int(8, minval = 1, title = 'Jaw Offset', group = 'Alligato Settings')
teethOffset = input.int(5, minval = 1, title = 'Teeth Offset', group = 'Alligato Settings')
lipsOffset = input.int(3, minval = 1, title = 'Lips Offset', group = 'Alligato Settings')
dojiPrecision = input.float(0.2, minval = 0.01, title = 'Doji Max Body size', group = 'Alligato Settings')

//-----------------------------------------------------------------------------}
//Trading Session Settings
//-----------------------------------------------------------------------------{
sessionStartHour = input.int(0, "Session Start Hour", minval=0, maxval=23)
sessionStartMin = input.int(0, "Session Start Minute", minval=0, maxval=59)
sessionEndHour = input.int(23, "Session End Hour", minval=0, maxval=23)
sessionEndMin = input.int(59, "Session End Minute", minval=0, maxval=59)

currentHour = hour(time)
currentMin  = minute(time)
currentTimeMins = currentHour * 60 + currentMin
sessionStartMins = sessionStartHour * 60 + sessionStartMin
sessionEndMins   = sessionEndHour * 60 + sessionEndMin

inSession = currentTimeMins >= sessionStartMins and currentTimeMins <= sessionEndMins

//-----------------------------------------------------------------------------}
//Risk Settings
//-----------------------------------------------------------------------------{
expoStdLength = input.int(64, title = 'Exponential SD Length', group = 'Risk Settings')
fastLength = input.int(1, title = 'Fast SD Length', group = 'Risk Settings')
slowLength = input.int(4, title = 'Slow SD Length', group = 'Risk Settings')
enableVol = input(true, title = 'Volatility Filter', group = 'Risk Settings')

//-----------------------------------------------------------------------------{
//Instrument Risk Calculation
//-----------------------------------------------------------------------------{
// Percentage returns
ret = (close - close[1]) / close[1]
var float dailyPercentVolRecent = na

ew_var = ta.ema(math.pow(ret, 2), expoStdLength)
dailyPercentVolRecent := math.sqrt(ew_var)

// Long-term vol  (8-year ≈ 2 000 bars)
longWindow = 2000           // author uses 10y; we use 8y per requirement
dailyPercentVol8Yr = ta.sma(dailyPercentVolRecent, longWindow)

// Weighted blend 70 / 30
dailyPercentVol = 0.7 * dailyPercentVolRecent + 0.3 * dailyPercentVol8Yr

// Instrument risk & price-vol units (same as original)
instRisk      = math.round(dailyPercentVol * 16, 6)
dailyPriceVol = dailyPercentVol * close

fastVol = ta.ema(ta.ema(dailyPriceVol, fastLength), fastLength)
slowVol = ta.ema(ta.ema(dailyPriceVol, slowLength), slowLength)
diffVol = fastVol - slowVol

//-----------------------------------------------------------------------------}
//Heikin Ashi Calculation
//-----------------------------------------------------------------------------{
[ha_open, ha_high, ha_low, ha_close] = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, [open, high, low, close])
haDoji = math.abs(ha_open - ha_close) <= (ha_high - ha_low) * dojiPrecision ? 1 : 0

//-----------------------------------------------------------------------------}
//Trend Calculation
//-----------------------------------------------------------------------------{
smma(src, len) =>
    var float s = na
    s := na(s[1]) ? ta.sma(src, len) : (s[1] * (len - 1) + src) / len
    s

highLow2 = (ha_high + ha_low)/2

jaw = smma(highLow2, jawPeriod)
teeth = smma(highLow2, teethPeriod)
lips = smma(highLow2, lipsPeriod)

//-----------------------------------------------------------------------------}
//Trend and Trading Session
//-----------------------------------------------------------------------------{
tradePossible = enableVol ? ((ha_close < lips[lipsOffset] and ha_close < teeth[teethOffset] and ha_close < jaw[jawOffset] and diffVol >= 0) or (ha_close > lips[lipsOffset] and ha_close > teeth[teethOffset] and ha_close > jaw[jawOffset] and diffVol >= 0)) : ((ha_close < lips[lipsOffset] and ha_close < teeth[teethOffset] and ha_close < jaw[jawOffset]) or (ha_close > lips[lipsOffset] and ha_close > teeth[teethOffset] and ha_close > jaw[jawOffset]))

//-----------------------------------------------------------------------------}
//Bar Colour
//-----------------------------------------------------------------------------{
var color trendColour = na
var bullColour = #089981
var bearColour = #f23645

if tradePossible and ha_close > ha_open
    trendColour := bullColour
    trendColour
else if tradePossible and ha_close < ha_open
    trendColour := bearColour
    trendColour
else
    trendColour := color.rgb(120, 123, 134, 65)
    trendColour

barcolor(trendColour)

//-----------------------------------------------------------------------------}
//Entry Exit Signal
//-----------------------------------------------------------------------------{
var hakOpenPosition = false

isRed   = ha_close < ha_open
isGreen = ha_close > ha_open

firstGreen = isGreen and isRed[1]
firstRed = isRed and isGreen[1]

hakBuy =  ha_close > ha_open and tradePossible and haDoji == 0 and inSession and hakOpenPosition == false
hakSell = ha_close < ha_open and tradePossible and haDoji == 0 and inSession and hakOpenPosition == false

buyExit = (firstRed and haDoji == 0 and hakOpenPosition == true) or (ta.crossunder(ha_close, teeth[teethOffset]) and hakOpenPosition == true)
sellExit = (firstGreen and haDoji == 0 and hakOpenPosition == true) or (ta.crossover(ha_close, teeth[teethOffset]) and hakOpenPosition == true)

//-----------------------------------------------------------------------------}
//Lot Settings
//-----------------------------------------------------------------------------{ 
initialLot = input.float(1, 'Initial Lot', minval = 0.01, step = 0.01, group = 'Account & Trade')

hakInitCond = hakOpenPosition == false

hakCond = (hakBuy and hakInitCond) or (hakSell and hakInitCond)

if hakCond
    hakOpenPosition := true


hakCondBuyExit = buyExit and hakOpenPosition
hakCondSellExit = sellExit and hakOpenPosition

if hakCondBuyExit
    hakOpenPosition := false
else if hakCondSellExit
    hakOpenPosition := false

//-----------------------------------------------------------------------------}
//Plot
//-----------------------------------------------------------------------------{
plotshape(hakBuy, title = 'Buy', text = 'L▲', textcolor = color.white, style = shape.labelup, location = location.belowbar, color = color.rgb(8, 153, 129, 70), size = size.tiny)
plotshape(hakSell, title = 'Sell', text = 'S▼', textcolor = color.white, style = shape.labeldown, location = location.abovebar, color = color.rgb(242, 54, 70, 70), size = size.tiny)

plotshape(buyExit, title = 'Buy Exit', style = shape.xcross, location = location.abovebar, color = color.rgb(8, 153, 129, 0), size = size.tiny)
plotshape(sellExit, title = 'Sell Exit', style = shape.xcross, location = location.belowbar, color = color.rgb(242, 54, 70, 0), size = size.tiny)

//-----------------------------------------------------------------------------}
//Strategy
//-----------------------------------------------------------------------------{ 
if inTimeWindow
    if hakBuy or hakSell
        strategy.entry('hak', hakBuy ? strategy.long : strategy.short, qty = initialLot)
    if buyExit or sellExit
        strategy.close('hak', qty_percent = 100)

// Calculate net profit and percentage profitable
strNetProfit = strategy.netprofit
strPercentProfitable = math.round(strategy.wintrades / (strategy.wintrades + strategy.losstrades), 2)
strProfitFactor = strategy.grossprofit / strategy.grossloss

bgDarkColour = color.rgb(0, 0, 0, 30)
bgLightColour = color.rgb(0, 0, 0, 20)

if strNetProfit > 0
    bgDarkColour := color.rgb(8, 153, 129)
    bgLightColour := color.rgb(8, 153, 129, 20)
    bgLightColour
else
    bgDarkColour := color.rgb(242, 54, 69)
    bgLightColour := color.rgb(242, 54, 69, 20)
    bgLightColour

//-----------------------------------------------------------------------------}
//Summary Table
//-----------------------------------------------------------------------------{ 
table_data = table.new(position = position.bottom_right, columns = 1, rows = 5, bgcolor = color.rgb(0, 0, 0, 100), frame_width = 1, border_width = 1)
table.cell(table_data, 0, 0, 'CP782', bgcolor = color.rgb(255, 255, 255, 70), text_size = size.normal, text_color = color.rgb(255, 255, 255))
table.cell(table_data, 0, 1, str.tostring('$' + str.tostring(math.round(strNetProfit, 0))), text_size = size.normal, bgcolor = bgDarkColour, text_color = color.rgb(255, 255, 255), text_halign = text.align_center, tooltip = 'Net Profit')
table.cell(table_data, 0, 2, str.tostring(str.tostring(math.round(strPercentProfitable * 100, 0)) + '%'), text_size = size.normal, bgcolor = bgLightColour, text_color = color.rgb(255, 255, 255), text_halign = text.align_center, tooltip = 'Percent Profitable')
table.cell(table_data, 0, 3, str.tostring(math.round(strProfitFactor, 2)), text_size = size.normal, bgcolor = bgDarkColour, text_color = color.rgb(255, 255, 255), text_halign = text.align_center, tooltip = 'Profit Factor')
table.cell(table_data, 0, 4, str.tostring('$' + str.tostring(math.round(strategy.max_drawdown, 0))), text_size = size.normal, bgcolor = color.rgb(242, 54, 69, 30), text_color = color.rgb(255, 255, 255), text_halign = text.align_center, tooltip = 'Max Drawdown')

//-----------------------------------------------------------------------------}
//Alert
//-----------------------------------------------------------------------------{
if hakBuy or hakSell
    alert('GOLD ' + (hakBuy ? 'Buy' : 'Sell') + ' lot ' + str.tostring(math.round(initialLot, 1)), alert.freq_once_per_bar_close)

if buyExit or sellExit
    alert('GOLD ' + (buyExit ? 'Exit Buy' : 'Exit Sell') + ' lot ' + str.tostring(math.round(initialLot, 1)), alert.freq_once_per_bar_close)
