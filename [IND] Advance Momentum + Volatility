//NSal
//@version=6
indicator('[IND] Advance Momentum + Volatility',  overlay = true)

//-----------------------------------------------------------------------------
//Color Styles
//-----------------------------------------------------------------------------
strongbullColor = color.rgb(8, 153, 129)
strongBearishColor = color.rgb(242, 54, 69)
neutralColor = color.rgb(255, 255, 255, 80)

//-----------------------------------------------------------------------------
//Input Group
//-----------------------------------------------------------------------------
var string momentum_settings    = "Momentum Settings"
var string sensitivity_settings = "Sensitivity Settings"
var string visual_settings      = "Visual Settings"

//-----------------------------------------------------------------------------}
//Risk Settings
//-----------------------------------------------------------------------------{
expoStdLength = input.int(32, title = 'Exponential SD Length', group = 'Risk Settings')
fastLength = input.int(5, title = 'Fast SD Length', group = 'Risk Settings')
slowLength = input.int(20, title = 'Slow SD Length', group = 'Risk Settings')

//-----------------------------------------------------------------------------{
//Instrument Risk Calculation
//-----------------------------------------------------------------------------{
// Percentage returns
ret = (close - close[1]) / close[1]
var float dailyPercentVolRecent = na

ew_var = ta.ema(math.pow(ret, 2), expoStdLength)
dailyPercentVolRecent := math.sqrt(ew_var)

// Long-term vol  (8-year ≈ 2 000 bars)
longWindow = 2000           // author uses 10y; we use 8y per requirement
dailyPercentVol8Yr = ta.sma(dailyPercentVolRecent, longWindow)

// Weighted blend 70 / 30
dailyPercentVol = 0.7 * dailyPercentVolRecent + 0.3 * dailyPercentVol8Yr

// Instrument risk & price-vol units (same as original)
instRisk      = math.round(dailyPercentVol * 16, 6)
dailyPriceVol = dailyPercentVol * close

fastVol   = ta.ema(ta.ema(dailyPriceVol, fastLength), fastLength)
slowVol   = ta.ema(ta.ema(dailyPriceVol, slowLength), slowLength)
diffVol = fastVol - slowVol

length = input.int(20, title = 'Difference Length', minval=1, group = 'Risk Settings')
maType = input.string("SMA", "Basis MA Type", options = ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = 'Risk Settings')
src = input(close, title="Source", group = 'Risk Settings')
mult = input.float(2.0, minval=0.001, maxval=50, title="StdDev", group = 'Risk Settings')

maa(source, length, _type) =>
    switch _type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

basis = maa(diffVol, length, maType)
dev = mult * ta.stdev(diffVol, length)
upper = basis + dev
lower = basis - dev

crossUp = ta.crossover(diffVol, upper)
crossDn = ta.crossunder(diffVol, lower)

var color flatColour = color.rgb(120, 123, 134, 60)

// persistent trend colour (starts neutral, flips only on signals)
var color trendColour = flatColour
if crossUp
    trendColour := strongbullColor
else if crossDn
    trendColour := strongBearishColor

//-----------------------------------------------------------------------------
//S&P500 Buy & Sell Zone
//-----------------------------------------------------------------------------
asset = input.symbol(title = 'Primary Source', defval = 'S5TH', inline = 'source', group = 'S&P500 Buy & Sell Zone')
buyThe = input(30, title = 'S&P500 Buy Threshold', group = 'S&P500 Buy & Sell Zone')
sellThe = input(70, title = 'S&P500 Sell Threshold', group = 'S&P500 Buy & Sell Zone')
sp500 = request.security(asset, 'W', close)

assetBuy = ta.crossover(sp500, 20)
assetSell = ta.crossunder(sp500, 80)

// Color
colorMa = sp500 < buyThe ? strongbullColor : sp500 > sellThe ? strongBearishColor : neutralColor

//-----------------------------------------------------------------------------}
//Moving Average
//-----------------------------------------------------------------------------{
smoothMa = input(true, title = 'Smooth MA', group = 'EMA Settings')

ma(source, length, type) =>
    type == 'SMA' ? ta.sma(source, length) : type == 'EMA' ? ta.ema(source, length) : type == 'SMMA (RMA)' ? ta.rma(source, length) : type == 'WMA' ? ta.wma(source, length) : type == 'VWMA' ? ta.vwma(source, length) : na

show_ma3 = input(true, 'MA №3', inline = 'MA #3', display = display.data_window, group = 'EMA Settings')
ma3_type = input.string('SMA', '', inline = 'MA #3', options = ['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'], group = 'EMA Settings')
ma3_source = input(close, '', inline = 'MA #3', display = display.data_window, group = 'EMA Settings')
ma3_length = input.int(40, '', inline = 'MA #3', minval = 1, group = 'EMA Settings')
ma3_color = input(color.rgb(8, 153, 129), '', inline = 'MA #3', display = display.data_window, group = 'EMA Settings')
ma3 = ma(ma3_source, ma3_length, ma3_type)
ma3mo = smoothMa ? ma(ma3, ma3_length, ma3_type) : ma3

show_ma4 = input(true, 'MA №4', inline = 'MA #4', display = display.data_window, group = 'EMA Settings')
ma4_type = input.string('SMA', '', inline = 'MA #4', options = ['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'], group = 'EMA Settings')
ma4_source = input(close, '', inline = 'MA #4', display = display.data_window, group = 'EMA Settings')
ma4_length = input.int(200, '', inline = 'MA #4', minval = 1, group = 'EMA Settings')
ma4_color = input(color.rgb(242, 54, 69), '', inline = 'MA #4', display = display.data_window, group = 'EMA Settings')
ma4 = ma(ma4_source, ma4_length, ma4_type)
ma4mo = smoothMa ? ma(ma4, ma4_length, ma4_type) : ma4
plot(show_ma4 ? ma4mo : na, color = sp500 < buyThe ? strongbullColor : sp500 > sellThe ? strongBearishColor : neutralColor, title = 'MA №4', linewidth = 2)

plotshape(assetBuy ? ma4mo : na, title = 'Buy', style = shape.circle, location = location.absolute, color = strongbullColor, size = size.tiny)
plotshape(assetSell ? ma4mo : na, title = 'Sell', style = shape.circle, location = location.absolute, color = strongBearishColor, size = size.tiny)

//-----------------------------------------------------------------------------
//MACD
//-----------------------------------------------------------------------------
[macdLine, signalLine, _] = ta.macd(close, 12, 26, 9)

//MACD cross conditions
macdCrossOver = ta.crossover(macdLine, signalLine)
macdCrossUnder = ta.crossunder(macdLine, signalLine)

//Highlight bar Green: MACD > 0 and Signal < 0
greenBar = macdLine > 0 and signalLine < 0
redBar = macdLine < 0 and signalLine > 0
barcolor(greenBar ? strongbullColor : redBar ? strongBearishColor : na, title = 'Bar Highlight Green')

//-----------------------------------------------------------------------------}
//Advanced Momentum Settings
//-----------------------------------------------------------------------------{
//EMA Settings
ultra_fast = input.int(8, title = 'Ultra-Fast EMA', 
     minval = 1, 
     group = momentum_settings)
     
fast = input.int(16, title = 'Fast EMA', 
     minval = 1, 
     group = momentum_settings)
     
mid = input.int(32, title = 'Mid EMA', 
     minval = 1, 
     group = momentum_settings)
     
slow = input.int(64, title = 'Slow EMA', 
     minval = 1, 
     group = momentum_settings)
     
series float price = input.source(close, 'Price Source', 
     group = momentum_settings)

// Momentum Settings
roc_period = input.int(5, title = 'RoC Period', 
     minval = 1, 
     group = momentum_settings)
     
mom_threshold = input.float(0.5, title = 'Momentum Threshold (%)', 
     step = 0.1, 
     group = momentum_settings)

// Sensitivity Settings
mode = input.string('Balanced', 'Sensitivity Mode', 
     options = ['Conservative', 'Balanced', 'Aggressive'], 
     group = sensitivity_settings)

// Visual Settings
up_color = strongbullColor
down_color = strongBearishColor
neutral_color = neutralColor

//-----------------------------------------------------------------------------
// Momentum Calculation
//-----------------------------------------------------------------------------
// Constant settings
const int   atr_len = 14
const float vol_thresh = 1.5
const int   rsi_len = 10
const int   rsi_high = 70
const int   rsi_low = 30
const bool  use_volume = true
const int   vol_len = 20
const int   bar_transp = 40
const int   max_intensity = 20

// EMAs
ema_ultra = ta.ema(price, ultra_fast)
ema_fast = ta.ema(price, fast)
ema_mid = ta.ema(price, mid)
ema_slow = ta.ema(price, slow)

// EMA slopes for trend momentum
slope_ultra = (ema_ultra - ema_ultra[1]) / ema_ultra[1] * 100
slope_fast = (ema_fast - ema_fast[1]) / ema_fast[1] * 100
slope_mid = (ema_mid - ema_mid[1]) / ema_mid[1] * 100

// Rate of Change for early trend detection
roc = (close - close[roc_period]) / close[roc_period] * 100
roc_smooth = ta.sma(roc, 3) // Smoothed RoC

// Dynamic volatility threshold based on sensitivity mode
var float dyn_thresh = vol_thresh
if mode == 'Conservative'
    dyn_thresh := vol_thresh * 1.2
else if mode == 'Aggressive'
    dyn_thresh := vol_thresh * 0.8
else
    dyn_thresh := vol_thresh

// Early Trend Direction (more sensitive)
early_up = ema_ultra > ema_fast and slope_fast > 0 and roc_smooth > mom_threshold
early_down = ema_ultra < ema_fast and slope_fast < 0 and roc_smooth < -mom_threshold

// Confirmed Trend Direction (more reliable)
confirm_up = ema_fast > ema_mid and ema_mid > ema_slow and close > ema_fast
confirm_down = ema_fast < ema_mid and ema_mid < ema_slow and close < ema_fast

// Final Trend Direction (based on sensitivity mode)
bool trend_up = false
bool trend_down = false
bool trend_neutral = false

if mode == 'Conservative'
    trend_up := confirm_up
    trend_down := confirm_down
    trend_neutral := not confirm_up and not confirm_down
else if mode == 'Aggressive'
    trend_up := early_up or ema_ultra > ema_fast and confirm_up
    trend_down := early_down or ema_ultra < ema_fast and confirm_down
    trend_neutral := not trend_up and not trend_down
else // Balanced
    trend_up := early_up and ema_fast > ema_mid or confirm_up
    trend_down := early_down and ema_fast < ema_mid or confirm_down
    trend_neutral := not trend_up and not trend_down

//-----------------------------------------------------------------------------
// Momentum Visualisation
//-----------------------------------------------------------------------------
// Calculate bands that cover the price bars automatically
calcBands() =>
    lookback = 10 // Number of bars to look back for determining range
    high_price = ta.highest(high, lookback)
    low_price = ta.lowest(low, lookback)

    middle = (high_price + low_price) / 2

    [middle]

[middle_band] = calcBands()

// Plot the main trend line with simple up/down/neutral color
//plot(middle_band, 'Trend', color = trend_up ? up_color : trend_down ? down_color : neutral_color, linewidth = 2)
plot(show_ma3 ? ma3mo : na, color = trend_up ? up_color : trend_down ? down_color : neutral_color, title = 'MA №3')
plotshape(crossUp ? ma3mo : na, title='New Highest exSD', style=shape.circle, location=location.absolute, color=color.rgb(255, 255, 255), size = size.tiny)
plotshape(crossDn ? ma3mo : na, title='New Lowest exSD', style=shape.xcross, location=location.absolute, color=color.rgb(117, 117, 117), size = size.tiny)

// Trend text and colors
trend_text = trend_up ? 'UPTREND' : trend_down ? 'DOWNTREND' : 'NEUTRAL'
color current_color = trend_up ? up_color : trend_down ? down_color : #555555

// Function to determine if a color is dark or light for contrast
isDarkColor(c) =>
    // Extract RGB components
    r = color.r(c)
    g = color.g(c)
    b = color.b(c)

    // Formula to determine brightness (weighted RGB)
    luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255

    // Return true if dark, false if light
    luminance < 0.5

//-----------------------------------------------------------------------------
// Alert
//-----------------------------------------------------------------------------
alertcondition(trend_neutral and not trend_neutral[1], 
     title="Detect Neutral State", 
     message="Neutral State {{exchange}}:{{ticker}}")

alertcondition(early_up and not confirm_up, 
     title="Detect Early Uptrend", 
     message="Early Uptrend Signal {{exchange}}:{{ticker}}")

alertcondition(early_down and not confirm_down, 
     title="Detect Early Downtrend", 
     message="Early Downtrend Signal {{exchange}}:{{ticker}}")
