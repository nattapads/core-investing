//@version=6
indicator('[IND] Sto + HH LL',  overlay = true)

vline_hh = input.bool(true, title = 'Vline Highest')
vline_ll = input.bool(true, title = 'Vline Lowest')

var array<float> high_tracking = na
var array<float> low_tracking = na

// Store previous turning points to avoid repeated notifications
var float prev_hh = na
var float prev_ll = na

// Function to track highest and lowest points
track_high_low(_src) =>
    hh_index = ta.highestbars(_src, 14)
    ll_index = ta.lowestbars(_src, 14)
    [hh_index, ll_index]

// Get the highest and lowest points based on the selected timeframe
[hh_index, ll_index] = track_high_low(close)

//-----------------------------------------------------------------------------}
//Stochastic Settings
//-----------------------------------------------------------------------------{
periodK1 = input.int(9, title = '%K 1 Length', minval = 1)
smoothK1 = input.int(1, title = '%K 1 Smoothing', minval = 1)
periodD1 = input.int(3, title = '%D 1 Smoothing', minval = 1)

periodK2 = input.int(14, title = '%K 2 Length', minval = 1)
smoothK2 = input.int(1, title = '%K 2 Smoothing', minval = 1)
periodD2 = input.int(3, title = '%D 2 Smoothing', minval = 1)

periodK3 = input.int(40, title = '%K 3 Length', minval = 1)
smoothK3 = input.int(1, title = '%K 3 Smoothing', minval = 1)
periodD3 = input.int(4, title = '%D 3 Smoothing', minval = 1)

periodK4 = input.int(60, title = '%K 4 Length', minval = 1)
smoothK4 = input.int(1, title = '%K 4 Smoothing', minval = 1)
periodD4 = input.int(10, title = '%D 4 Smoothing', minval = 1)

buyThreshold = input.int(20, title = 'Buy Threshold', minval = 1)
sellThreshold = input.int(80, title = 'Buy Threshold', minval = 1)

//-----------------------------------------------------------------------------}
//Stochastic Calculation
//-----------------------------------------------------------------------------{
k1 = ta.sma(ta.stoch(close, high, low, periodK1), smoothK1)
d1 = ta.sma(k1, periodD1)

k2 = ta.sma(ta.stoch(close, high, low, periodK2), smoothK2)
d2 = ta.sma(k2, periodD2)

k3 = ta.sma(ta.stoch(close, high, low, periodK3), smoothK3)
d3 = ta.sma(k3, periodD3)

k4 = ta.sma(ta.stoch(close, high, low, periodK4), smoothK4)
d4 = ta.sma(k4, periodD4)

//-----------------------------------------------------------------------------}
//Line Colour
//-----------------------------------------------------------------------------{
var strBullColour = color.rgb(8, 153, 129)
var bullColour = color.rgb(8, 153, 129, 40)
var strbearColour = color.rgb(242, 54, 69)
var bearColour = color.rgb(242, 54, 69, 40)

//-----------------------------------------------------------------------------}
//SetUp Calculation
//-----------------------------------------------------------------------------{
strBullish = d4 <= buyThreshold and d3 <= buyThreshold and d2 <= buyThreshold and d1 <= buyThreshold
bullish = d4 <= buyThreshold and d3 <= buyThreshold and d2 <= buyThreshold

strBearish = d4 >= sellThreshold and d3 >= sellThreshold and d2 >= sellThreshold and d1 >= sellThreshold
bearish = d4 >= sellThreshold and d3 >= sellThreshold and d2 >= sellThreshold

//-----------------------------------------------------------------------------}
//HH & LL Calculation
//-----------------------------------------------------------------------------{
newHigh = vline_hh and hh_index >= 0
newLow = vline_ll and ll_index >= 0

//-----------------------------------------------------------------------------
// Track combined conditions for Short plot
//-----------------------------------------------------------------------------
var bool bothBearishHappened = false
var bool plotShort = false

// Check if both strBearish and newHigh happen at the same time
if strBearish and newHigh
    bothBearishHappened := true
    bothBearishHappened

// Condition to plot the circle when newLow occurs after bothBearishHappened is true
plotShort := bothBearishHappened and newLow

if plotShort
    bothBearishHappened := false
    bothBearishHappened

//-----------------------------------------------------------------------------
// Track combined conditions for Long plot
//-----------------------------------------------------------------------------
var bool bothBullishHappened = false
var bool plotLong = false

// Check if both strBullish and newLow happen at the same time
if strBullish and newLow
    bothBullishHappened := true
    bothBullishHappened

// Condition to plot the square when newHigh occurs after bothBullishHappened is true
plotLong := bothBullishHappened and newHigh

if plotLong
    bothBullishHappened := false
    bothBullishHappened

//-----------------------------------------------------------------------------
// Plot Circle and Square
//-----------------------------------------------------------------------------
plotshape(plotShort, style = shape.triangledown, location = location.abovebar, color = strbearColour, size = size.tiny)
plotshape(plotLong, style = shape.triangleup, location = location.belowbar, color = strBullColour, size = size.tiny)


//-----------------------------------------------------------------------------
// Color Styles
//-----------------------------------------------------------------------------
strongbullColor = color.rgb(8, 153, 129)
strongBearishColor = color.rgb(242, 54, 69)
neutralColor = color.rgb(255, 255, 255, 80)

//-----------------------------------------------------------------------------}
//Moving Average
//-----------------------------------------------------------------------------{
smoothMa = input(true, title = 'Smooth MA')

ma(source, length, type) =>
    type == 'SMA' ? ta.sma(source, length) : type == 'EMA' ? ta.ema(source, length) : type == 'SMMA (RMA)' ? ta.rma(source, length) : type == 'WMA' ? ta.wma(source, length) : type == 'VWMA' ? ta.vwma(source, length) : na

show_ma1 = input(false, 'MA №1', inline = 'MA #1', display = display.data_window)
ma1_type = input.string('EMA', '', inline = 'MA #1', options = ['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'])
ma1_source = input(close, '', inline = 'MA #1', display = display.data_window)
ma1_length = input.int(8, '', inline = 'MA #1', minval = 1)
ma1_color = input(color.rgb(8, 153, 129, 60), '', inline = 'MA #1', display = display.data_window)
ma1 = ma(ma1_source, ma1_length, ma1_type)
ma1mo = smoothMa ? ma(ma1, ma1_length, ma1_type) : ma1
plot(show_ma1 ? ma1mo : na, color = ma1_color, title = 'MA №1')

show_ma2 = input(true, 'MA №2', inline = 'MA #2', display = display.data_window)
ma2_type = input.string('EMA', '', inline = 'MA #2', options = ['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'])
ma2_source = input(close, '', inline = 'MA #2', display = display.data_window)
ma2_length = input.int(16, '', inline = 'MA #2', minval = 1)
ma2_color = input(color.rgb(8, 153, 129, 40), '', inline = 'MA #2', display = display.data_window)
ma2 = ma(ma2_source, ma2_length, ma2_type)
ma2mo = smoothMa ? ma(ma2, ma2_length, ma2_type) : ma2
plot(show_ma2 ? ma2mo : na, color = ma2_color, title = 'MA №2')

show_ma3 = input(true, 'MA №3', inline = 'MA #3', display = display.data_window)
ma3_type = input.string('EMA', '', inline = 'MA #3', options = ['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'])
ma3_source = input(close, '', inline = 'MA #3', display = display.data_window)
ma3_length = input.int(42, '', inline = 'MA #3', minval = 1)
ma3_color = input(color.rgb(8, 153, 129), '', inline = 'MA #3', display = display.data_window)
ma3 = ma(ma3_source, ma3_length, ma3_type)
ma3mo = smoothMa ? ma(ma3, ma3_length, ma3_type) : ma3
plot(show_ma3 ? ma3mo : na, color = ma3_color, title = 'MA №3')

//-----------------------------------------------------------------------------
// Main MA
//-----------------------------------------------------------------------------
asset = input.symbol(title = 'Primary Source', defval = 'S5TH', group = 'Sources', inline = 'source')
CLOSE = request.security(asset, 'W', close)
buyThe = input(30)
sellThe = input(70)

assetBuy = ta.crossover(CLOSE, 20)
assetSell = ta.crossunder(CLOSE, 80)

// Color
colorMa = CLOSE < buyThe ? strongbullColor : CLOSE > sellThe ? strongBearishColor : neutralColor

show_ma4 = input(true, 'MA №4', inline = 'MA #4', display = display.data_window)
ma4_type = input.string('EMA', '', inline = 'MA #4', options = ['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'])
ma4_source = input(close, '', inline = 'MA #4', display = display.data_window)
ma4_length = input.int(200, '', inline = 'MA #4', minval = 1)
ma4_color = input(color.rgb(242, 54, 69), '', inline = 'MA #4', display = display.data_window)
ma4 = ma(ma4_source, ma4_length, ma4_type)
ma4mo = smoothMa ? ma(ma4, ma4_length, ma4_type) : ma4
plot(show_ma4 ? ma4mo : na, color = CLOSE < buyThe ? strongbullColor : CLOSE > sellThe ? strongBearishColor : neutralColor, title = 'MA №4', linewidth = 2)

plotshape(assetBuy ? ma4mo : na, title = 'Buy', style = shape.circle, location = location.absolute, color = strongbullColor, size = size.tiny)
plotshape(assetSell ? ma4mo : na, title = 'Sell', style = shape.circle, location = location.absolute, color = strongBearishColor, size = size.tiny)

//-----------------------------------------------------------------------------
// Bar Colouring
//-----------------------------------------------------------------------------
isBull = ma1 > ma2 and ma1 > ma3 and ma1 > ma4 and ma2 > ma3 and ma2 > ma4 and ma3 > ma4 and close > ma4
isBear = ma1 < ma2 and ma1 < ma3 and ma1 < ma4 and ma2 < ma3 and ma2 < ma4 and ma3 < ma4 and close < ma4

//-----------------------------------------------------------------------------
// MACD
//-----------------------------------------------------------------------------
[macdLine, signalLine, _] = ta.macd(close, 12, 26, 9)

// MACD cross conditions
macdCrossOver = ta.crossover(macdLine, signalLine)
macdCrossUnder = ta.crossunder(macdLine, signalLine)

// Highlight bar Green: MACD > 0 and Signal < 0
greenBar = macdLine > 0 and signalLine < 0
redBar = macdLine < 0 and signalLine > 0
barcolor(greenBar ? strBullColour : redBar ? strbearColour : na, title = 'Bar Highlight Green')

// Green Circle below bar: Transition from Signal < 0 to > 0 while MACD > 0
greenCircle = macdLine > 0 and signalLine > 0 and macdLine[1] > 0 and signalLine[1] < 0
plotshape(greenCircle, location = location.abovebar, style = shape.triangleup, color = strBullColour, size = size.tiny, title = 'Signal Flip to Positive - Green Circle')

// Red Circle above bar: Transition from Signal > 0 to < 0 while MACD < 0
redCircle = macdLine < 0 and signalLine < 0 and macdLine[1] < 0 and signalLine[1] > 0
plotshape(redCircle, location = location.belowbar, style = shape.triangledown, color = strbearColour, size = size.tiny, title = 'Signal Flip to Negative - Red Circle')
